type Approval @entity {
  id: ID!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
}

type Mint @entity {
  id: ID!
  recipient: User!
  issuedAmount: BigInt!
  transferId: String!
  mintFee: MintFee @derivedFrom(field: "mint")
}

type MintFee @entity {
  id: ID!
  feeAmount: BigInt!
  collector: Bytes! # address where fee was sent
  mint: Mint
}

enum RoleActionEnum {
  GRANT
  REVOKE
}

type Role @entity {
  id: ID!
  role: Bytes!
  sender: Bytes!
  action: RoleActionEnum!
}

type RoleAdminChanged @entity {
  id: ID!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
}

type Paused @entity {
  id: ID!
  account: Bytes! # address
}

type Transfer @entity {
  id: ID!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
}

type Unpaused @entity {
  id: ID!
  account: Bytes! # address
}

type User @entity {
  id: ID! # address of the user
  roles: [Role!]!
  mints: [Mint!] @derivedFrom(field: "recipient")
}